package com.jellydiamonds.android.app;

import java.util.ArrayList;
import java.util.Collection;

import com.jellydiamonds.android.metier.GemID;

import android.content.Context;
import android.database.DataSetObserver;
import android.graphics.BitmapFactory;
import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.ImageView;
import android.widget.ListAdapter;
import android.widget.TextView;

public class JellyCollectionAdapter implements ListAdapter{

	private Context mContext = null;
	private ArrayList<GemID> mData = null;
	private int	mLayout = -1;
	
	private LayoutInflater mLayoutInflater = null;
	
	public JellyCollectionAdapter( Context context, Collection<GemID> data, int resourceLayout )
	{
		this.mContext = context;
		this.mData = new ArrayList<GemID>(data);
		this.mLayout = resourceLayout;
		this.mLayoutInflater = ( LayoutInflater )context.getSystemService(Context.LAYOUT_INFLATER_SERVICE);
	}
	
	@Override
	public int getCount() {
		// TODO Auto-generated method stub
		return mData.size();
	}

	@Override
	public Object getItem(int position) {
		// TODO Auto-generated method stub
		return this.mData.get(position);
	}

	@Override
	public long getItemId(int position) {
		// TODO Auto-generated method stub
		return 0;
	}

	@Override
	public int getItemViewType(int position) {
		// TODO Auto-generated method stub
		return 0;
	}

	@Override
	public View getView(int position, View convertView, ViewGroup parent) {
		// TODO Auto-generated method stub
		
		View rowView = convertView;
		GemID currentGem = null;
		
		if( rowView == null)
		{
			rowView = mLayoutInflater.inflate(R.layout.gemid_row_preview_fragment, null);
		}
		
		currentGem = mData.get( position );
		
		ImageView l_picture = (ImageView) rowView.findViewById(R.id.row_preview_gemid_picture);
		TextView  l_title = (TextView) rowView.findViewById(R.id.row_preview_gemid_specie);
		TextView  l_summary = (TextView) rowView.findViewById(R.id.row_preview_gemid_summary);
		
		
		l_title.setText( mData.get(position).getSpecies().toString() ); // Temporary
		l_summary.setText( mData.get(position).getReference() );        // Temporary
		l_picture.setImageBitmap(BitmapFactory.decodeFile( mData.get(position).getPhotoLink().getPath()));
		
		return null;
	}

	@Override
	public int getViewTypeCount() {
		// TODO Auto-generated method stub
		return 0;
	}

	@Override
	public boolean hasStableIds() {
		// TODO Auto-generated method stub
		return false;
	}

	@Override
	public boolean isEmpty() {
		// TODO Auto-generated method stub
		return mData.isEmpty();
	}

	@Override
	public void registerDataSetObserver(DataSetObserver observer) {
		// TODO Auto-generated method stub
		
	}

	@Override
	public void unregisterDataSetObserver(DataSetObserver observer) {
		// TODO Auto-generated method stub
		
	}

	@Override
	public boolean areAllItemsEnabled() {
		// TODO Auto-generated method stub
		return false;
	}

	@Override
	public boolean isEnabled(int position) {
		// TODO Auto-generated method stub
		return false;
	}

}
