package com.jellydiamonds.android.camera;

import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.util.List;

import android.hardware.Camera;
import android.os.Build;
import android.os.Bundle;
import android.os.Environment;
import android.annotation.TargetApi;
import android.app.Activity;
import android.content.pm.PackageManager;
import android.util.DisplayMetrics;
import android.util.Log;
import android.view.View;
import android.view.View.OnClickListener;
import android.widget.Button;
import android.widget.FrameLayout;
import android.widget.RelativeLayout;

@TargetApi(Build.VERSION_CODES.GINGERBREAD)
public class MainActivity extends Activity {
	
		private static final String TAG = "[CAMERASAFEPREVIEW: MainActivity]";

		
		/**
		 * UI
		 */
		
	    private FrameLayout 		mFrameLayout = null;
	    private RelativeLayout		mRelativeLayout = null;
	    private Button				mButtonSnap = null;
	    
		/**
		 * Camera Members
		 */
	 	private Camera 				mCamera = null;
	    private Preview 			mSurfaceView = null;
	    private DisplayMetrics		mScreenInfo = null;
	    private int					mLandscapeWidth = 0;
	    private int					mLandscapeHeight = 0;
	    
	    /**
	     * Activity entry point function 
	     */
	    
	    @Override
	    protected void onCreate(Bundle savedInstanceState) {
	        // TODO Auto-generated method stub
	        super.onCreate(savedInstanceState);
	        setContentView(R.layout.preview);

	        // Get Widgets
	        mFrameLayout = (FrameLayout)findViewById(R.id.camera_preview);
	        mRelativeLayout = (RelativeLayout)findViewById(R.id.controls_layout);
	        mButtonSnap = (Button)findViewById(R.id.button_photo);
	        
	        // Set control callbacks
	        setControlCallbacks();
	        
	        // Get information about screen
	        mScreenInfo = new DisplayMetrics();
	        getWindowManager().getDefaultDisplay().getMetrics(mScreenInfo);
	        
	        // Define the landscape size of the screen
	        if( mScreenInfo.widthPixels < mScreenInfo.heightPixels )
	        {
	        	mLandscapeHeight = mScreenInfo.widthPixels;
	        	mLandscapeWidth = mScreenInfo.heightPixels;
	        }
	        else
	        {
	        	mLandscapeHeight = mScreenInfo.heightPixels;
	        	mLandscapeWidth = mScreenInfo.widthPixels;
	        }
	        
	        Log.d(TAG,"Info : Screen landscape size is : " + mLandscapeWidth + "x" + mLandscapeHeight);
	    }
	    
	    

	    @Override
	    protected void onDestroy() {
	        // TODO Auto-generated method stub
	        super.onDestroy();
	        releasePreview();
	    }
	    
	    @Override
	    protected void onStop() {
	    	super.onStop();
	    	releasePreview();
	    }
	    
	    @Override
	    protected void onPause() {
	        // TODO Auto-generated method stub
	        super.onPause();
	        releasePreview();
	    }

	    @Override
	    protected void onResume() {
	        // TODO Auto-generated method stub
	        super.onResume();
	        
	        if( safeCameraOpen() )
	        {
	        	Log.d(TAG,"Info : Camera successfully opened.");
	        
	        	mSurfaceView = new Preview(this, mCamera);
	        	mFrameLayout.addView(mSurfaceView); // Display Preview
		        mRelativeLayout.bringToFront();		// Display control on Top
	        }
	    }
	    
	/**
	 * CallBacks
	 * 
	 */
	 
	    private Camera.PictureCallback mCALLBACK_Picture = new Camera.PictureCallback() {

			@Override
			public void onPictureTaken(byte[] data, Camera camera) {
				// TODO Auto-generated method stub
				//Log.d(TAG, "Photo size : " + data.length);
				
				File pictureFile = new File(Environment.getExternalStoragePublicDirectory(Environment.DIRECTORY_PICTURES),"test.jpg");	

		        try {
		            FileOutputStream fos = new FileOutputStream(pictureFile);
		            fos.write(data);
		            fos.close();
		        } catch (FileNotFoundException e) {
		            Log.d(TAG, "File not found: " + e.getMessage());
		        } catch (IOException e) {
		            Log.d(TAG, "Error accessing file: " + e.getMessage());
		        }

			}
	    	
	    };
	    
	/**
	 * Control utilities
	 */
	    
	 private void setControlCallbacks()
	 {
		 /*
		  * Snapshot button
		  */
		 this.mButtonSnap.setOnClickListener( new OnClickListener() {
			
			@Override
			public void onClick(View arg0) {
				// TODO Auto-generated method stub
				/*
				 * Check if camera is operational
				 */
				if( mCamera != null )
				{
					/*
					 *  shutter : 	the callback for image capture moment, or null
					 *	raw 	:   the callback for raw (uncompressed) image data, or null
					 *	postview: 	callback with postview image data, may be null
				 	 *	jpeg 	:   the callback for JPEG image data, or null 
					 */
					Log.d(TAG,"Saving picture to : " + Environment.getExternalStoragePublicDirectory(Environment.DIRECTORY_PICTURES));
					mCamera.takePicture( null, null, mCALLBACK_Picture );
				}
			}
		});
	 }
	    
	/**
	 *  Camera utilities   
	 * 
	 */
	private boolean safeCameraOpen() {
		
	    Camera  			l_camera = null;   
	    Camera.Parameters 	l_param = null;
	    boolean 		  	l_found = false;		
	  
	    /**
	     * Check if camera device is available on system.
	     */
	    if( ! this.getPackageManager().hasSystemFeature(PackageManager.FEATURE_CAMERA) )
	    	return false;
	    
	    try 
	    {
	    	releasePreview();
	        l_camera = Camera.open();
	        
	        /**
	         * Set the optimal preview size ( according to the screen size )
	         */
	        setCameraConfig( l_camera );
	        l_param = l_camera.getParameters();
	        
	        for( Camera.Size l_size : l_param.getSupportedPreviewSizes())
	        {
	        	//Log.d(TAG,"Info : Preiview size available : " + l_size.width + "x" + l_size.height);
	        	if(  l_size.width == mLandscapeWidth )
	        	{
	        		l_found = true;
	        		//Log.d(TAG,"Info : Landscape size available in supported preview and picture size.");
	        		break;
	        	}
	        }
	        
	        if( l_found )
        		l_param.setPreviewSize(mLandscapeWidth, mLandscapeHeight);
	        else
	        	l_param.setPreviewSize(	l_param.getSupportedPreviewSizes().get(0).width, 
	        							l_param.getSupportedPreviewSizes().get(0).height );
	        
	        l_camera.setParameters(l_param);
	        
	        /**
	         * Set the normal orientation
	         */
	        l_camera.setDisplayOrientation(90);
	        mCamera = l_camera;
	        
	    } 
	    catch (Exception e) 
	    {
	        Log.e(TAG, "ERROR : failed to open Camera.");
	        e.printStackTrace();
	    }
	    
	    return (mCamera != null);   
	}

	private void releasePreview()
	{
		
		if( mSurfaceView != null )
		{
			mFrameLayout.removeView(mSurfaceView);
			mSurfaceView.getHolder().removeCallback(mSurfaceView);
		}
		
		
	    if (mCamera != null) {
	        mCamera.setPreviewCallback(null);
	        mCamera.release();
	        mCamera = null;
	    }
	    
	    
	}
	
	private void setCameraConfig( Camera camera )
	{
		Camera.Parameters l_param = camera.getParameters();
		List<Camera.Size> l_preview_sizes = l_param.getSupportedPreviewSizes();
		List<Camera.Size> l_picture_size = l_param.getSupportedPictureSizes();
		
		for( Camera.Size l_tmp : l_preview_sizes)
		{
			Log.d(TAG,"Info : Preview size available : " + l_tmp.width + "x" + l_tmp.height);
		}
		
		for( Camera.Size l_tmp : l_picture_size)
		{
			Log.d(TAG,"Info : Picture size available : " + l_tmp.width + "x" + l_tmp.height);
		}
		
	}
	
}



//--------------------------------------------------------------------
//Camera.Parameters p = mCamera.getParameters();
//Size size = p.getPreviewSize();
//int width = size.width;
//int height = size.height;
//p.setPreviewFormat(ImageFormat.JPEG);
//mCamera.setParameters(p);


//mSurfaceView = new Preview(this);
//
//ViewGroup.LayoutParams layoutParams = new ViewGroup.LayoutParams(ViewGroup.LayoutParams.MATCH_PARENT, ViewGroup.LayoutParams.MATCH_PARENT);
//
//mSurfaceView.setLayoutParams(layoutParams);
//
//mFrameLayout = (FrameLayout)findViewById(R.id.preview);
//
//mFrameLayout.addView(mSurfaceView);

//for(int t_preview : p.getSupportedPreviewFormats() )
//{
//	Log.d("[CAMERASAFEPREVIEW]", "SupportedPreviewFormat : " + t_preview);
//}

