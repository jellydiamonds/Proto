package com.jellydiamonds.android.app;

import com.jellydiamonds.android.app.ItemFragment.OnFragmentInteractionListener;
import com.jellydiamonds.android.metier.GemCertificate;
import com.jellydiamonds.android.metier.GemClarity;
import com.jellydiamonds.android.metier.GemCurrency;
import com.jellydiamonds.android.metier.GemCut;
import com.jellydiamonds.android.metier.GemEnhancement;
import com.jellydiamonds.android.metier.GemID;
import com.jellydiamonds.android.metier.GemLight;
import com.jellydiamonds.android.metier.GemOrigin;
import com.jellydiamonds.android.metier.GemShape;
import com.jellydiamonds.android.metier.GemSpecies;
import com.jellydiamonds.android.metier.JellyUser;

import android.app.Activity;
import android.app.ListFragment;
import android.content.res.Configuration;
import android.os.Bundle;
import android.support.v4.app.ActionBarDrawerToggle;
import android.support.v4.view.GravityCompat;
import android.support.v4.widget.DrawerLayout;
import android.util.Log;
import android.view.LayoutInflater;
import android.view.Menu;
import android.view.MenuInflater;
import android.view.MenuItem;
import android.view.View;
import android.view.ViewGroup;
import android.widget.AdapterView;
import android.widget.AdapterView.OnItemClickListener;
import android.widget.ArrayAdapter;
import android.widget.LinearLayout;
import android.widget.ListView;


public class Main extends Activity implements OnFragmentInteractionListener {
	
	public static final String TAG = "[JellyDiamonds-DEBUG]";
	
	
	private DrawerLayout mDrawerLayout = null;
	private LinearLayout mDrawerLinearLayout = null;
	private ListView mDrawerLocalOptionList = null;
	private ListView mDrawerDistantOptionList = null;
	private ActionBarDrawerToggle mDrawerToggle = null;
	
	private CharSequence mAppTitle = null;
	
	private String[]	mDrawerLoalOptionsTitle = null;
	private String[]	mDrawerDistantOptionsTitle = null;
	
	/**
	 * Code Metier
	 */
	
	private JellyUser mJellyUser = null;

	@Override
	protected void onCreate(Bundle savedInstanceState) {
		super.onCreate(savedInstanceState);
		setContentView(R.layout.main_screen);
		

		mAppTitle = getTitle();
        mDrawerLayout = (DrawerLayout) findViewById(R.id.root_drawer_layout);
        mDrawerLinearLayout = (LinearLayout)findViewById(R.id.drawer_Linearlayout);
        mDrawerLocalOptionList = (ListView) findViewById(R.id.local_options_list);
        mDrawerDistantOptionList = (ListView) findViewById(R.id.distant_options_list);

        mDrawerLoalOptionsTitle = getResources().getStringArray(R.array.local_actions);
        mDrawerDistantOptionsTitle = getResources().getStringArray(R.array.distant_actions);
        
        // enable ActionBar app icon to behave as action to toggle nav drawer
        getActionBar().setDisplayHomeAsUpEnabled(true);
        getActionBar().setHomeButtonEnabled(true);
        
        // set a custom shadow that overlays the main content when the drawer opens
        mDrawerLayout.setDrawerShadow(R.drawable.drawer_shadow, GravityCompat.START);
        
        // set up the left drawer's list view with items and click listener
        mDrawerLocalOptionList.setAdapter(new ArrayAdapter<String>(this,
                R.layout.drawer_list_item, mDrawerLoalOptionsTitle ));
        mDrawerLocalOptionList.setOnItemClickListener(new DrawerLocalItemClickListener());
        
        mDrawerDistantOptionList.setAdapter(new ArrayAdapter<String>(this,
                R.layout.drawer_list_item, mDrawerDistantOptionsTitle ));
        mDrawerDistantOptionList.setOnItemClickListener(new DrawerDistantItemClickListener());

       // mCentralDrawerList.setAdapter(new ArrayAdapter<String>(this,
       //         R.layout.drawer_list_item, new String[] {"this","is","awesome" }));

        // ActionBarDrawerToggle ties together the the proper interactions
        // between the sliding drawer and the action bar app icon
        mDrawerToggle = new ActionBarDrawerToggle(
                this,                  /* host Activity */
                mDrawerLayout,         /* DrawerLayout object */
                R.drawable.ic_drawer,  /* nav drawer image to replace 'Up' caret */
                R.string.drawer_open,  /* "open drawer" description for accessibility */
                R.string.drawer_close  /* "close drawer" description for accessibility */
                ) {
            public void onDrawerClosed(View view) {
                getActionBar().setTitle(mAppTitle);
                invalidateOptionsMenu(); // creates call to onPrepareOptionsMenu()
            }

            public void onDrawerOpened(View drawerView) {
            	getActionBar().setTitle(mAppTitle);
                invalidateOptionsMenu(); // creates call to onPrepareOptionsMenu()
            }
        };
        mDrawerLayout.setDrawerListener(mDrawerToggle);
        
        mJellyUser = getUser();
        
        if (savedInstanceState == null) {
        	selectLocalAction( 0 );
        }

	}
	
	@Override
	protected void onPause()
	{
		super.onPause();
		if( JellyUser.saveJellyUserContext("save.jelly", this.getFilesDir().toString(), mJellyUser ) == true )
			Log.d(TAG, "Success JellyUser saved!");
		else
			Log.d(TAG,"Error while saving JellyUser...");
	}
	
	@Override
	protected void onDestroy()
	{
		super.onDestroy();
	}
	
	public JellyUser getUser()
	{
		JellyUser l_tmp = null;
		Log.d(TAG,"Triing to recover previous session from + " + getFilesDir());
		if( ( l_tmp = JellyUser.recoverJellyUserContext( "save.jelly", this.getFilesDir().toString() ) ) == null )
		{
			Log.d(TAG,"No previous session retrieved : new JellyUser created.");
			l_tmp =  new JellyUser();
			GemID gem1 = new GemID();
			
			gem1.setReference("20140409EMER001");
			gem1.setColor("#123456");
			gem1.setMass(2.05f);
			gem1.setSizeX(11.05f);
			gem1.setSizeY(7.01f);
			gem1.setSizeZ(4.37f);
			gem1.setComments("This gem is perfect it's my best one");
			gem1.setPriceCurrency(GemCurrency.USD);
			gem1.setPriceValue(300.5f);
			gem1.setSupplierID(6666L);
			//gem1.setPhotoLink(l_photo);
			gem1.setSpecies(GemSpecies.EMERALD);
			gem1.setShape(GemShape.RECTANGLE);
			gem1.setCut(GemCut.DIAMOND);
			gem1.setClarity(GemClarity.EYES_CLEAN_TO_SLIGHTLY_INCLUDED);
			gem1.setLight(GemLight.FLUORESCENT_LIGHT);
			gem1.setEnhancement(GemEnhancement.HIGH_PRESSURE);
			gem1.setCertificate(GemCertificate.GIA);
			gem1.setOrigin(GemOrigin.MOZAMBIQUE);
			l_tmp.getCollection().getLocalCollection().add(gem1);

		}
		else
		{
			Log.d(TAG,"Previous session retrieved : JellyUser recovered from file." + l_tmp.getFirstName());
		}
		return l_tmp;
	}

    @Override
    public boolean onCreateOptionsMenu(Menu menu) {
        MenuInflater inflater = getMenuInflater();
        inflater.inflate(R.menu.main, menu);
        return super.onCreateOptionsMenu(menu);
    }

    /* Called whenever we call invalidateOptionsMenu() */
    @Override
    public boolean onPrepareOptionsMenu(Menu menu) {
        // If the nav drawer is open, hide action items related to the content view
        boolean drawerOpen = mDrawerLayout.isDrawerOpen(mDrawerLinearLayout);
        //menu.findItem(R.id.action_websearch).setVisible(!drawerOpen);
        return super.onPrepareOptionsMenu(menu);
    }

    @Override
    public boolean onOptionsItemSelected(MenuItem item) {
         // The action bar home/up action should open or close the drawer.
         // ActionBarDrawerToggle will take care of this.
        if (mDrawerToggle.onOptionsItemSelected(item)) {
            return true;
        }
        // Handle action buttons
        switch(item.getItemId()) {
        /*case R.id.action_websearch:
            // create intent to perform web search for this planet
            Intent intent = new Intent(Intent.ACTION_WEB_SEARCH);
            intent.putExtra(SearchManager.QUERY, getActionBar().getTitle());
            // catch event that there's no activity to handle intent
            if (intent.resolveActivity(getPackageManager()) != null) {
                startActivity(intent);
            } else {
                Toast.makeText(this, R.string.app_not_available, Toast.LENGTH_LONG).show();
            }
            return true;*/
        default:
            return super.onOptionsItemSelected(item);
        }
    }
    
    /**
     * When using the ActionBarDrawerToggle, you must call it during
     * onPostCreate() and onConfigurationChanged()...
     */

    @Override
    protected void onPostCreate(Bundle savedInstanceState) {
        super.onPostCreate(savedInstanceState);
        // Sync the toggle state after onRestoreInstanceState has occurred.
        mDrawerToggle.syncState();
    }

    @Override
    public void onConfigurationChanged(Configuration newConfig) {
        super.onConfigurationChanged(newConfig);
        // Pass any configuration change to the drawer toggls
        mDrawerToggle.onConfigurationChanged(newConfig);
    }
    
    
    /* Click listener for local actions */
    private class DrawerLocalItemClickListener implements ListView.OnItemClickListener {
        @Override
        public void onItemClick(AdapterView<?> parent, View view, int position, long id) {
        	selectLocalAction( position );
        }
    }
    
    /* Click listener for distant actions */
    private class DrawerDistantItemClickListener implements ListView.OnItemClickListener {
        @Override
        public void onItemClick(AdapterView<?> parent, View view, int position, long id) {
        	selectDistantAction( position );
        }
    }
    

    
    private void selectLocalAction( int position )
    {
    	/*android.app.FragmentManager fm = getFragmentManager();
    	JellyCollectionFragment fr = new JellyCollectionFragment();
    	fm.beginTransaction().replace(R.id.content_frame, fr).commit();
    	
    	fr.setListAdapter( new JellyCollectionAdapter(
    						this, 
    						mJellyUser.getCollection().getAllGems(),
    						R.layout.gemid_row_preview_fragment));*/
    	
    	android.app.FragmentManager l_fragment_manager = getFragmentManager();
    	JellyCollectionAdapter l_listAdapter = new JellyCollectionAdapter(this,
    			this.mJellyUser.getCollection().getAllGems());
    	ItemFragment l_listFragment = ItemFragment.newInstance();
        l_listFragment.setAdapter(l_listAdapter);
    	
    	l_fragment_manager.beginTransaction().replace(R.id.content_frame, l_listFragment).commit();
    	
    	resetListChoice(mDrawerDistantOptionList);
    }
    
    private void selectDistantAction( int position )
    {
    	android.app.FragmentManager l_fragment_manager = getFragmentManager();
    	JellyCollectionAdapter l_listAdapter = new JellyCollectionAdapter(this,
    			this.mJellyUser.getCollection().getAllGems());
    	ItemFragment l_listFragment = ItemFragment.newInstance();
        l_listFragment.setAdapter(l_listAdapter);
    	
    	l_fragment_manager.beginTransaction().replace(R.id.content_frame, l_listFragment).commit();
    	
    	resetListChoice(mDrawerLocalOptionList);  	
    }
    
    
    private void resetListChoice( ListView list )
    {
    	// Reset list
    	list.clearChoices();
    	list.invalidateViews();
    	// Close Drawer
    	mDrawerLayout.closeDrawer( mDrawerLinearLayout );
    }
   

    
    public static class JellyCollectionFragment extends ListFragment implements OnItemClickListener {
        @Override
        public View onCreateView(LayoutInflater inflater, ViewGroup container,
                                 Bundle savedInstanceState) {
            // Inflate the layout for this fragment
            return inflater.inflate(R.layout.gemid_list_fragment, container, false);
        }

		@Override
		public void onItemClick(AdapterView<?> arg0, View arg1, int position,
				long id) {
			// TODO Auto-generated method stub
			Log.d("LIST","Clicked pos : " + position);
		}
    }

	@Override
	public void onFragmentInteraction(String id) {
		// TODO Auto-generated method stub
		
	}
}
