package com.jellydiamonds.android.camera;

import android.graphics.ImageFormat;
import android.hardware.Camera;
import android.hardware.Camera.Size;
import android.os.Build;
import android.os.Bundle;
import android.annotation.TargetApi;
import android.app.Activity;
import android.content.Context;
import android.content.pm.PackageManager;
import android.util.DisplayMetrics;
import android.util.Log;
import android.view.Menu;
import android.view.ViewGroup;
import android.widget.FrameLayout;

@TargetApi(Build.VERSION_CODES.GINGERBREAD)
public class MainActivity extends Activity {
	
		private static final String TAG = "[CAMERASAFEPREVIEW: MainActivity]";

	 	private Camera 				mCamera = null;
	    private Preview 			mSurfaceView = null;
	    private FrameLayout 		mFrameLayout = null;
	    private DisplayMetrics		mScreenInfo = null;
	    private Camera.Size			mLandscapeSize = null;

	    @Override
	    protected void onCreate(Bundle savedInstanceState) {
	        // TODO Auto-generated method stub
	        super.onCreate(savedInstanceState);
	        setContentView(R.layout.activity_main);
	        
	        mFrameLayout = (FrameLayout)findViewById(R.id.preview);
	        mScreenInfo = new DisplayMetrics();
	        getWindowManager().getDefaultDisplay().getMetrics(mScreenInfo);
	        
	        // Define the landscape size of the screen
	        if( mScreenInfo.widthPixels < mScreenInfo.heightPixels )
	        {
	        	mLandscapeSize.height = mScreenInfo.widthPixels;
	        	mLandscapeSize.width = mScreenInfo.heightPixels;
	        }
	        else
	        {
	        	mLandscapeSize.height = mScreenInfo.heightPixels;
	        	mLandscapeSize.width = mScreenInfo.widthPixels;
	        }
	        	
	    }

	    @Override
	    protected void onDestroy() {
	        // TODO Auto-generated method stub
	        super.onDestroy();
	        releasePreview();
	    }

	    @Override
	    protected void onPause() {
	        // TODO Auto-generated method stub
	        super.onPause();
	        releasePreview();
	    }

	    @Override
	    protected void onResume() {
	        // TODO Auto-generated method stub
	        super.onResume();
	        
	        if( ! safeCameraOpen() )
	        	return;
	        Log.println(Log.INFO, "[onResume()]", "Camera Opened !");
	        
	        
	        mSurfaceView = new Preview(this, mCamera);
	        mFrameLayout.addView(mSurfaceView);
//	        Camera.Parameters p = mCamera.getParameters();
//	        Size size = p.getPreviewSize();
//	        int width = size.width;
//	        int height = size.height;
	        //p.setPreviewFormat(ImageFormat.JPEG);
	        //mCamera.setParameters(p);


//	        mSurfaceView = new Preview(this);
//
//	        ViewGroup.LayoutParams layoutParams = new ViewGroup.LayoutParams(ViewGroup.LayoutParams.MATCH_PARENT, ViewGroup.LayoutParams.MATCH_PARENT);
//
//	        mSurfaceView.setLayoutParams(layoutParams);
//
//	        mFrameLayout = (FrameLayout)findViewById(R.id.preview);
//
//	        mFrameLayout.addView(mSurfaceView);

//	        for(int t_preview : p.getSupportedPreviewFormats() )
//	        {
//	        	Log.d("[CAMERASAFEPREVIEW]", "SupportedPreviewFormat : " + t_preview);
//	        }
	    }
	    
	private boolean safeCameraOpen() {
		
	    Camera  l_camera = null;   
	    Camera.Parameters l_param = null;
	  
	    /**
	     * Check if camera device is available on system.
	     */
	    if( ! this.getPackageManager().hasSystemFeature(PackageManager.FEATURE_CAMERA) )
	    	return false;
	    
	    try 
	    {
	    	releasePreview();
	        l_camera = Camera.open();
	        
	        /**
	         * Set the optimal preview size
	         */
	        l_param = l_camera.getParameters();
	        if( l_param.getSupportedPictureSizes().contains( mLandscapeSize ) ) 
	        {
	        	Log.d(TAG,"Landscape size available in supported preview and picture size.");
	        	l_param.setPictureSize(mLandscapeSize.width, mLandscapeSize.height);
	        	l_camera.setParameters(l_param);
	        }
	        
	        /**
	         * Set the normal orientation
	         */
	        l_camera.setDisplayOrientation(90);
	        mCamera = l_camera;
	        
	    } 
	    catch (Exception e) 
	    {
	        Log.e(TAG, "ERROR : failed to open Camera.");
	        e.printStackTrace();
	    }
	    
	    return (mCamera != null);   
	}

	private void releasePreview()
	{
		if( mSurfaceView != null )
			mSurfaceView.getHolder().removeCallback(mSurfaceView);
		
		
	    if (mCamera != null) {
	        mCamera.setPreviewCallback(null);
	        mCamera.release();
	        mCamera = null;
	    }
	    
	    
	}
	
}


