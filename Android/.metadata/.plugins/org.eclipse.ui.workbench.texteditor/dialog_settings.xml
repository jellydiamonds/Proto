<?xml version="1.0" encoding="UTF-8"?>
<section name="Workbench">
	<section name="org.eclipse.ui.texteditor.FindReplaceDialog_dialogBounds">
		<item value="263" key="DIALOG_WIDTH"/>
		<item value="128" key="DIALOG_Y_ORIGIN"/>
		<item value="589" key="DIALOG_X_ORIGIN"/>
		<item value="399" key="DIALOG_HEIGHT"/>
		<item value="1|Lucida Grande|11.0|0|COCOA|1|LucidaGrande" key="DIALOG_FONT_NAME"/>
	</section>
	<section name="org.eclipse.ui.texteditor.FindReplaceDialog">
		<item value="true" key="wrap"/>
		<item value="false" key="casesensitive"/>
		<item value="false" key="isRegEx"/>
		<item value="false" key="incremental"/>
		<item value="false" key="wholeword"/>
		<item value="" key="selection"/>
		<list key="findhistory">
			<item value="button_photo"/>
			<item value="Log"/>
			<item value="requestLayout"/>
			<item value="surfaceView"/>
			<item value="&#x0A;public class Preview extends ViewGroup implements SurfaceHolder.Callback {&#x0A;&#x0A;    private SurfaceView mSurfaceView = null;&#x0A;    private SurfaceHolder mHolder = null;&#x0A;    private Camera mCamera = null;&#x0A;    private List&lt;Size&gt; mSupportedPreviewSizes = null;&#x0A;&#x0A;    Preview(Context context) {&#x0A;        super(context);&#x0A;&#x0A;        mSurfaceView = new SurfaceView(context);&#x0A;        addView(mSurfaceView);&#x0A;&#x0A;        // Install a SurfaceHolder.Callback so we get notified when the&#x0A;        // underlying surface is created and destroyed.&#x0A;        mHolder = mSurfaceView.getHolder();&#x0A;        mHolder.addCallback(this);&#x0A;        mHolder.setType(SurfaceHolder.SURFACE_TYPE_PUSH_BUFFERS);&#x0A;        &#x0A;    }&#x0A;    &#x0A;    public void setCamera(Camera camera) {&#x0A;        if (mCamera == camera) { return; }&#x0A;        &#x0A;        stopPreviewAndFreeCamera();&#x0A;        &#x0A;        mCamera = camera;&#x0A;        &#x0A;        if (mCamera != null) {&#x0A;            List&lt;Size&gt; localSizes = mCamera.getParameters().getSupportedPreviewSizes();&#x0A;            mSupportedPreviewSizes = localSizes;&#x0A;            requestLayout();&#x0A;          &#x0A;            try {&#x0A;                mCamera.setPreviewDisplay(mHolder);&#x0A;            } catch (IOException e) {&#x0A;                e.printStackTrace();&#x0A;            }&#x0A;          &#x0A;            // Important: Call startPreview() to start updating the preview&#x0A;            // surface. Preview must be started before you can take a picture.&#x0A;            mCamera.startPreview();&#x0A;        }&#x0A;    }&#x0A;&#x0A;&#x09;/**&#x0A;&#x09; * When this function returns, mCamera will be null.&#x0A;&#x09; */&#x0A;&#x09;private void stopPreviewAndFreeCamera() {&#x0A;&#x0A;&#x09;    if (mCamera != null) {&#x0A;&#x09;        // Call stopPreview() to stop updating the preview surface.&#x0A;&#x09;        mCamera.stopPreview();&#x0A;&#x09;    &#x0A;&#x09;        // Important: Call release() to release the camera for use by other&#x0A;&#x09;        // applications. Applications should release the camera immediately&#x0A;&#x09;        // during onPause() and re-open() it during onResume()).&#x0A;&#x09;        mCamera.release();&#x0A;&#x09;    &#x0A;&#x09;        mCamera = null;&#x0A;&#x09;    }&#x0A;&#x09;}&#x0A;&#x09;&#x0A;&#x09;@Override&#x0A;&#x09;public void surfaceChanged(SurfaceHolder arg0, int arg1, int arg2, int arg3) {&#x0A;&#x09;&#x09;// TODO Auto-generated method stub&#x0A;&#x09;    // Now that the size is known, set up the camera parameters and begin&#x0A;&#x09;    // the preview.&#x0A;&#x09;    Camera.Parameters parameters = mCamera.getParameters();&#x0A;&#x09;    parameters.setPreviewSize(mSupportedPreviewSizes.get(0).width, mSupportedPreviewSizes.get(0).height);&#x0A;&#x09;    requestLayout();&#x0A;&#x09;    mCamera.setParameters(parameters);&#x0A;&#x0A;&#x09;    // Important: Call startPreview() to start updating the preview surface.&#x0A;&#x09;    // Preview must be started before you can take a picture.&#x0A;&#x09;    mCamera.startPreview();&#x0A;&#x0A;&#x09;&#x09;&#x0A;&#x09;}&#x0A;&#x09;&#x0A;&#x0A;&#x09;@Override&#x0A;&#x09;public void surfaceCreated(SurfaceHolder arg0) {&#x0A;&#x09;&#x09;// TODO Auto-generated method stub&#x0A;&#x09;&#x09;&#x0A;&#x09;}&#x0A;&#x0A;&#x09;@Override&#x0A;&#x09;public void surfaceDestroyed(SurfaceHolder arg0) {&#x0A;&#x09;&#x09;// TODO Auto-generated method stub&#x0A;&#x09;    // Surface will be destroyed when we return, so stop the preview.&#x0A;&#x09;    if (mCamera != null) {&#x0A;&#x09;        // Call stopPreview() to stop updating the preview surface.&#x0A;&#x09;        mCamera.stopPreview();&#x0A;&#x09;    }&#x0A;&#x0A;&#x09;&#x09;&#x0A;&#x09;}&#x0A;&#x0A;&#x09;@Override&#x0A;&#x09;protected void onLayout(boolean arg0, int arg1, int arg2, int arg3, int arg4) {&#x0A;&#x09;&#x09;// TODO Auto-generated method stub&#x0A;&#x09;&#x09;&#x0A;&#x09;}&#x0A;&#x0A;}&#x0A;"/>
		</list>
		<list key="replacehistory">
			<item value="mSurfaceView"/>
		</list>
	</section>
</section>
